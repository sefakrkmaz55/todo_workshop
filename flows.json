[
    {
        "id": "c7bc50bc70faa2e6",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "615f079a8aa5339c",
        "type": "http in",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 160,
        "wires": [
            [
                "60e032395ffd4390"
            ]
        ]
    },
    {
        "id": "0237702a07bf4ddd",
        "type": "http response",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 510,
        "y": 160,
        "wires": []
    },
    {
        "id": "7642510650b825ae",
        "type": "template",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/add\" method=\"POST\">\n                    <div class=\"input-group input-group-lg\">\n                        <input required type=\"text\" name=\"name\" class=\"form-control {{#error}}border-danger{{/error}}\" placeholder=\"Example Data \">\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Clear</button>\n                        <button class=\"btn btn-outline-primary px-5\" type=\"submit\">Add</button>\n                    </div>\n                </form>\n                <div class=\"card mt-2 overflow-hidden\">\n                    <div class=\"card-body p-0\">\n                        <div class=\"table-responsive\">\n                            <table class=\"table table-hover m-0\">\n                                <thead class=\"table-dark\">\n                                    <tr>\n                                        <th colspan=\"2\">To-Do</th>\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {{#payload}}\n                                    <tr valign=\"middle\">\n                                        <td>\n                                            {{#done}}\n                                            <h4 class=\"text-muted\"><del>{{name}}</del></h4>\n                                            {{/done}}\n                                            {{^done}}\n                                            <h4>{{name}}</h4>\n                                            {{/done}}\n                                            <div class=\"badge bg-secondary\"><small><i class=\"bi bi-calendar\"></i>{{date}} {{time}}</small></div>\n                                        </td>\n                                        <td align=\"right\">\n                                            <div class=\"btn-group\">\n                                                <form method=\"POST\">\n                                                    <input type=\"hidden\" name=\"id\" value=\"{{id}}\"/>\n                                                    {{#done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"OPEN\" type=\"submit\" formaction=\"/opt/open\" class=\"btn btn-warning\" ><i class=\"bi bi-arrow-clockwise\"></i></button>\n                                                    {{/done}}\n                                                    {{^done}}\n                                                    <a data-bs-toggle=\"tooltip\" data-bs-title=\"EDIT\" href=\"/edit/{{id}}\" class=\"btn btn-info\"><i class=\"bi bi-pencil-fill\"></i></a>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"SCHEDULE\" type=\"submit\" class=\"btn btn-secondary\"><i class=\"bi bi-bell-fill\"></i></button>\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"COMPLETE\" type=\"submit\" formaction=\"/opt/complete\" class=\"btn btn-success\"><i class=\"bi bi-check-lg\"></i></button>\n                                                    {{/done}}\n                                                    <button data-bs-toggle=\"tooltip\" data-bs-title=\"TRASH\" type=\"submit\" formaction=\"/opt/trash\" class=\"btn btn-danger\"><i class=\"bi bi-trash2-fill\"></i></button>\n                                                </form>\n                                            </div>\n                                        </td>\n                                    </tr>\n                                    {{/payload}}\n                                    {{^payload}}\n                                    <tr>\n                                        <td colspan=2 class=\"text-muted text-center\">You haven't logged in yet...</td>\n                                    </tr>\n                                    {{/payload}}\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "0237702a07bf4ddd"
            ]
        ]
    },
    {
        "id": "aa4e057101d68978",
        "type": "function",
        "z": "c7bc50bc70faa2e6",
        "name": "DB",
        "func": "// Flush DB\nglobal.set(\"DB\", {\n    todo: []\n})",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\n\nconst DB = global.get(\"DB\") || {\n    todo: []\n}\n\n/**\n *  TODO DB Schema\n * id:NOW\n * name:string\n * done:true\n * stamp:{\n *  createdAt:NOW,\n *  ip:IP,\n *  username:\"\",\n *  email: \"\",\n *  date: \"GG.AA.YYYY\"\n *  time: \"SS:DD\"\n * }\n**/\n\nglobal.set(\"DB\", DB)",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 40,
        "wires": []
    },
    {
        "id": "593596cc3da7b840",
        "type": "inject",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 40,
        "wires": [
            [
                "aa4e057101d68978"
            ]
        ]
    },
    {
        "id": "60e032395ffd4390",
        "type": "function",
        "z": "c7bc50bc70faa2e6",
        "name": "db.todo.find",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 160,
        "wires": [
            [
                "7642510650b825ae"
            ]
        ]
    },
    {
        "id": "ef8f32f3c3abbbd0",
        "type": "link in",
        "z": "c7bc50bc70faa2e6",
        "name": "link in 1",
        "links": [
            "4798e034973f8536",
            "68391c4649fd59ff",
            "3a83fb3dab8424ca",
            "aeaa59b1ed2394fa",
            "c040757e4ddb31af",
            "901ff748672df847",
            "dc12e2df44853d84",
            "f95397e9e478d02f",
            "e838c80b7a8a0d7f",
            "67e7aec6f0052ff1"
        ],
        "x": 85,
        "y": 120,
        "wires": [
            [
                "60e032395ffd4390"
            ]
        ]
    },
    {
        "id": "d1275aa47046c081",
        "type": "http in",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "url": "/opt/:type",
        "method": "post",
        "upload": true,
        "swaggerDoc": "",
        "x": 100,
        "y": 240,
        "wires": [
            [
                "badb5b1aa4acc4ec"
            ]
        ]
    },
    {
        "id": "ccff4c07eff6e01a",
        "type": "http response",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "statusCode": "302",
        "headers": {
            "location": "/"
        },
        "x": 620,
        "y": 200,
        "wires": []
    },
    {
        "id": "4c42b812ea686d3f",
        "type": "function",
        "z": "c7bc50bc70faa2e6",
        "name": "db.todo.opt()",
        "func": "const DB = global.get(\"DB\")\n\nlet todo = DB.todo\nconst date = new Date()\nconst now = date.getTime()\n\nif (msg.req.params.type === \"add\") {\n    todo.push({\n        id: new Date().getTime(),\n        name: msg.payload.name,\n        done: false,\n        stamp: {\n            createdAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\"\n        },\n        date: date.toLocaleDateString(\"en-US\"),\n        time: date.toLocaleTimeString(\"en-US\")\n    })\n} else {\n    const index = todo.findIndex(x => x.id == msg.payload.id)\n\n    if (!~index) {\n        msg.error = {\n            message: \"No record found matching your ID.\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type === \"update\" && todo[index].done) {\n        msg.error = {\n            message: \"Completed jobs cannot be edited\"\n        }\n        return [null, msg]\n    }\n\n    if (msg.req.params.type === \"trash\") {\n        todo.splice(index, 1)\n    } else {\n        switch (msg.req.params.type) {\n            case \"complete\":\n                todo[index].done = true\n                break;\n            case \"open\":\n                todo[index].done = false\n                break;\n            case \"update\":\n                todo[index].name = msg.payload.name\n                break;\n        }\n        todo[index].stamp = {\n            createdAt: now,\n            ip: msg.req.ip,\n            username: \"\",\n            email: \"\"\n        }\n        todo[index].date = date.toLocaleDateString(\"en-US\")\n        todo[index].time = date.toLocaleTimeString(\"en-US\")\n    }\n}\n\n//DB.todo = todo\nglobal.set(\"DB\", DB)\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 220,
        "wires": [
            [
                "ccff4c07eff6e01a"
            ],
            [
                "e838c80b7a8a0d7f"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "badb5b1aa4acc4ec",
        "type": "function",
        "z": "c7bc50bc70faa2e6",
        "name": "validation",
        "func": "const typeLookup = {\n    trash: {\n        text: \"Trash\",\n        requireArgs: [\"id\"]\n    },\n    complete: {\n        text: \"Complete\",\n        requireArgs: [\"id\"]\n    },\n    open: {\n        text: \"Open\",\n        requireArgs: [\"id\"]\n    },\n    add: {\n        text: \"Add\",\n        requireArgs: [\"name\"]\n    },\n    update: {\n        text: \"Update\",\n        requireArgs: [\"id\", \"name\"]\n    }\n}\n\nif (!Object.keys(typeLookup).includes(msg.req.params.type)) {\n    msg.error = {\n        message: `${msg.req.params.type} invalid paramater.`\n    }\n    return [null, msg]\n}\n\nif (!typeLookup[msg.req.params.type].requireArgs.every(arg => msg.payload[arg])) {\n    msg.error = {\n        message: `${typeLookup[msg.req.params.type].text} the element must have an ID.`\n    }\n    return [null, msg]\n}\nreturn msg;\n\n\n",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 240,
        "wires": [
            [
                "4c42b812ea686d3f"
            ],
            [
                "f95397e9e478d02f"
            ]
        ],
        "outputLabels": [
            "Valid",
            "Invalid"
        ]
    },
    {
        "id": "f95397e9e478d02f",
        "type": "link out",
        "z": "c7bc50bc70faa2e6",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "ef8f32f3c3abbbd0"
        ],
        "x": 375,
        "y": 260,
        "wires": []
    },
    {
        "id": "e838c80b7a8a0d7f",
        "type": "link out",
        "z": "c7bc50bc70faa2e6",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "ef8f32f3c3abbbd0"
        ],
        "x": 575,
        "y": 240,
        "wires": []
    },
    {
        "id": "430cfb551e158498",
        "type": "http in",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "url": "/edit/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 320,
        "wires": [
            [
                "329d5065742a3c4d"
            ]
        ]
    },
    {
        "id": "329d5065742a3c4d",
        "type": "function",
        "z": "c7bc50bc70faa2e6",
        "name": "db.todo.findOne()",
        "func": "const DB = global.get(\"DB\")\n\nmsg.payload = DB.todo.find(x => x.id == msg.req.params.id)\n\nif (!msg.payload) {\n    msg.error = {\n        message: \"No record found matching your ID.\"\n    }\n    return [null, msg]\n}\n\nif (msg.payload.done) {\n    msg.error = {\n        message: \"Completed jobs cannot be edited\"\n    }\n    return [null, msg]\n}\n\nreturn msg;",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 320,
        "wires": [
            [
                "bf2d1d56ff9b4d6e"
            ],
            [
                "67e7aec6f0052ff1"
            ]
        ],
        "outputLabels": [
            "Succ",
            "Err"
        ]
    },
    {
        "id": "bf2d1d56ff9b4d6e",
        "type": "template",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>To-Do List</title>\n\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/font/bootstrap-icons.min.css\">\n</head>\n\n<body>\n    <div class=\"container mt-5\">\n        <div class=\"row\">\n            <div class=\"col-md-8 offset-md-2\">\n                {{#error}}\n                <div class=\"alert alert-danger\">\n                    <h4>{{message}}</h4>\n                </div>\n                {{/error}}\n                <form action=\"/opt/update\" method=\"POST\">\n                    <input type=\"hidden\" name=\"id\" value=\"{{payload.id}}\"/>\n                    <div class=\"mb-3\">\n                        <input required type=\"text\" name=\"name\" value=\"{{payload.name}}\" class=\"form-control form-control-lg {{#error}}border-danger{{/error}}{{^error}}border-info{{/error}}\" placeholder=\"Example Data \">\n                    </div>\n                    <div class=\"mb-3 float-end\">\n                        <a class=\"btn btn-warning\" href=\"/\">Cancel</a>\n                        <button class=\"btn btn-outline-secondary\" type=\"reset\">Clear</button>\n                        <button class=\"btn btn-outline-success px-5\" type=\"submit\">Update</button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    </div>\n    <script src=\"/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle=\"tooltip\"]')\n        const tooltipList = [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl))\n    </script>\n</body>\n\n</html>",
        "output": "str",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "f275b976ab63ce67"
            ]
        ]
    },
    {
        "id": "67e7aec6f0052ff1",
        "type": "link out",
        "z": "c7bc50bc70faa2e6",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "ef8f32f3c3abbbd0"
        ],
        "x": 425,
        "y": 340,
        "wires": []
    },
    {
        "id": "f275b976ab63ce67",
        "type": "http response",
        "z": "c7bc50bc70faa2e6",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 300,
        "wires": []
    }
]